# -*- coding: utf-8 -*-
# This file was *autogenerated* from the file ratmatch.sage.
from sage.all_cmdline import *   # import sage library
_sage_const_2 = Integer(2); _sage_const_20 = Integer(20); _sage_const_0 = Integer(0); _sage_const_1 = Integer(1)#!/usr/bin/env sage
# -*- coding: utf-8 -*-

import sys
sys.path.append('/usr/lib/pymodules/python2.6/')

from sage.all import *
from first import *
from sorti import *
from random import *

DenSource = first(Primes(), _sage_const_20 )
Rats = [ ]

for Den in DenSource:
	for Num in range(_sage_const_1 , Den):
		
		Rats.append( Num/Den )

LA = Rats[:-_sage_const_1 ]
LB = Rats[_sage_const_1 :]

A = ( [ [_sage_const_0 , _sage_const_0 ], [_sage_const_1 , _sage_const_1 ] ]
		+ [ [a, None]  for a in LA ] )
B = ( [ [_sage_const_0 , True], [_sage_const_1 , True] ]
		+ [ [b, False] for b in LB ] )

AI, AIR = sorti(A, lambda (a1,b1), (a2,b2): int(sign(a1-a2)) )

def box(i, step, cap):
	j = AIR[i] + step
	
	while j >= _sage_const_0 :
		i2 = AI[j]
		[a, b] = A[i2]
		
		if b != None:
			return b
		
		j += step
	
	return cap

def dn_box(i):
	return box(i, -_sage_const_1 , _sage_const_0 )

def up_box(i):
	return box(i, +_sage_const_1 , _sage_const_1 )

for i in range(_sage_const_2 , len(A)):
	p = A[i]
	[a, _ig] = p
	
	b_dn = dn_box(i)
	b_up = up_box(i)
	
	found = False
	
	for pb in B:
		[b, taken] = pb
		
		if (not taken) and (b_dn < b) and (b < b_up):
			found = True
			break
	
	if found:
		pb[_sage_const_1 ] = True
		p[_sage_const_1 ] = b

A = [ [a,b] for [a,b] in A if b != None ]
A.sort(lambda (a1,b1), (a2,b2): int(sign(a1-a2)))

X = [ float(a) for [a,b] in A ]
Y = [ float(b) for [a,b] in A ]
