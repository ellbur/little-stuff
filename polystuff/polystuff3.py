# This file was *autogenerated* from the file polystuff3.sage.
from sage.all_cmdline import *   # import sage library
_sage_const_3 = Integer(3); _sage_const_2 = Integer(2); _sage_const_1 = Integer(1); _sage_const_0 = Integer(0); _sage_const_5 = Integer(5); _sage_const_4 = Integer(4); _sage_const_13 = Integer(13); _sage_const_12 = Integer(12)#!/usr/bin/env sage
# -*- coding: utf-8 -*-

def aug(seq):
	if len(seq) == _sage_const_0 :
		raise Exception
	
	it = iter(seq)
	A = next(it)
	
	for B in it:
		A = A.augment(B)
	
	return A

def stack(seq):
	if len(seq) == _sage_const_0 :
		raise Exception
	
	it = iter(seq)
	A = next(it)
	
	for B in it:
		A = A.stack(B)
	
	return A	

def grad(u):
	Vars = u.args()
	
	return matrix([
		[u.diff(v)] for v in Vars
	])

var('a b c d e f')

__tmp__=var("a,b,c"); f = symbolic_expression(a**_sage_const_2  + b**_sage_const_2  - c**_sage_const_2 ).function(a,b,c)
g = grad(f)

print('\nf\n')
print(f)

print('\ng\n')
print(g)

Backs = [
	(a-_sage_const_1 , b,   c   ),
	(a,   b-_sage_const_1 , c   ),
	(a,   b,   c-_sage_const_1  ),
	(a-_sage_const_1 , b-_sage_const_1 , c-_sage_const_1  ),
	(a,   b,   c   )
]

RHS = g()

Coeffs = aug([
	g(*Back) for Back in Backs
])

Partics = [
	{'a':_sage_const_3 , 'b': _sage_const_4 , 'c': _sage_const_5 },
	{'a':_sage_const_5 , 'b':_sage_const_12 , 'c':_sage_const_13 },
	{'a':_sage_const_5 , 'b':_sage_const_12 , 'c':_sage_const_13 }
]

RHS_P    = stack([ RHS.subs(**P)    for P in Partics ])
Coeffs_P = stack([ Coeffs.subs(**P) for P in Partics ])

print('\nRHS\n')
print(RHS)

print('\nCoeffs\n')
print(Coeffs)

print('\nRHS_P\n')
print(RHS_P)

print('\nCoeffs_P\n')
print(Coeffs_P)

Sol = Coeffs_P  * BackslashOperator() * RHS_P

print('\nSol\n')
print(Sol)

Kernel = Coeffs_P.transpose().kernel()

print('\nKernel\n')
print(Kernel)

Test = sum([
	Sol[i] * f(*Backs[i]) for i in range(Sol.ncols())
])

print('\nTest\n')
print(Test)
